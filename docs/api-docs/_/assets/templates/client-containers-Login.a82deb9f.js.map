{"version":3,"sources":["webpack:////home/circleci/project/node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js","webpack:////home/circleci/project/hub-builder/lib/client/containers/Login.js"],"names":["Divider","props","children","className","clearing","content","fitted","hidden","horizontal","inverted","section","vertical","classes","classnames_default","Object","classNameBuilders","rest","getUnhandledProps","ElementType","getElementType","react_default","a","createElement","extends_default","lib","isNil","handledProps","propTypes","Divider_Divider","Login","clearError","_this$props","_this","updateUi","routerStore","setQueryParams","error","undefined","login","provider","arguments","length","data","window","_this$props2","axios","method","url","concat","then","res","location","pathname","_","get","catch","err","renderSaml","_this$props3","ui","auth","loggingIn","key","Button","fluid","secondary","default","disabled","onClick","buttonText","renderAuth0","_this$props4","renderBasic","_this$props5","_ui$username","username","_ui$password","password","onSubmit","e","preventDefault","FormInput","id","value","onChange","trim","target","placeholder","type","Icon","name","renderAuth","component","React","Component","clearUi","this","defaultProvider","_this2","_this$props6","_this$props6$auth","whitelabel","namespace","components","push","forEach","authComponent","Fragment","title","subtitle","ErrorMessage","HubBranding","centered","InjectedLogin","inject","stores","appStore","_objectSpread","injectUi","observer","withRouteData","routeData","lib_0","_extends"],"mappings":"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","file":"templates/client-containers-Login.a82deb9f.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","import React from 'react';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport { inject, observer } from 'mobx-react';\nimport { Button, Divider, Header, Icon } from 'semantic-ui-react';\nimport { SiteData, withRouteData } from '@stoplight/react-static';\n\nimport ErrorMessage from '@platform/components/ErrorMessage';\nimport FormInput from '@platform/components/FormInput';\n\nimport { HubBranding } from '@platform/format-hubs/components/HubBranding';\n\nclass Login extends React.Component {\n  componentWillMount() {\n    const { clearUi } = this.props;\n\n    if (clearUi) clearUi();\n  }\n\n  clearError = () => {\n    const { updateUi, routerStore } = this.props;\n\n    routerStore.setQueryParams({ error: undefined });\n    updateUi('unset', 'error');\n  };\n\n  login = (provider = 'basic', data = {}) => {\n    if (typeof window === 'undefined') return;\n\n    const { updateUi, routerStore } = this.props;\n\n    this.clearError();\n\n    updateUi('set', 'loggingIn', true);\n\n    axios({\n      method: 'post',\n      url: `/_/${provider}/login`,\n      data,\n    })\n      .then(res => {\n        window.location.pathname = _.get(routerStore, 'location.query.r', '/');\n      })\n      .catch(err => {\n        updateUi('unset', 'loggingIn');\n        updateUi('set', 'error', err);\n      });\n  };\n\n  renderSaml = () => {\n    const { ui, auth } = this.props;\n    const { loggingIn } = ui;\n\n    return (\n      <div key=\"saml\" className=\"SamlLogin\">\n        <Button\n          fluid\n          secondary={auth.default === 'saml'}\n          className=\"AccountForm-cta\"\n          disabled={loggingIn}\n          onClick={() => {\n            window.location.pathname = '/_/saml/login';\n          }}\n          content={auth.buttonText || 'Click here to log in'}\n        />\n      </div>\n    );\n  };\n\n  renderAuth0 = () => {\n    const { ui, auth } = this.props;\n    const { loggingIn } = ui;\n\n    return (\n      <div key=\"auth0\" className=\"Auth0Login\">\n        <Button\n          fluid\n          secondary={auth.default === 'auth0'}\n          className=\"AccountForm-cta\"\n          disabled={loggingIn}\n          onClick={() => {\n            window.location.pathname = '/_/auth0/login';\n          }}\n          content={auth.buttonText || 'Click here to log in'}\n        />\n      </div>\n    );\n  };\n\n  renderBasic = () => {\n    const { ui, updateUi, auth } = this.props;\n    const { username = '', password = '', loggingIn } = ui;\n\n    return (\n      <form\n        key=\"basic\"\n        className=\"BasicLogin\"\n        onSubmit={e => {\n          e.preventDefault();\n\n          this.login('basic', { username, password });\n        }}\n      >\n        <div className=\"AccountForm-input-group\">\n          <FormInput\n            id=\"login-user\"\n            value={username}\n            onChange={e => {\n              updateUi('set', 'username', _.trim(e.target.value));\n            }}\n            disabled={loggingIn}\n            placeholder=\"Username\"\n            fluid\n          />\n\n          <FormInput\n            id=\"login-pass\"\n            type=\"password\"\n            value={password}\n            onChange={e => {\n              updateUi('set', 'password', _.trim(e.target.value));\n            }}\n            disabled={loggingIn}\n            placeholder=\"Password\"\n            fluid\n          />\n        </div>\n\n        <div className=\"pt-3\">\n          <Button\n            fluid\n            type=\"submit\"\n            disabled={loggingIn}\n            className=\"AccountForm-cta\"\n            secondary={auth.default === 'basic'}\n          >\n            {auth.buttonText || 'Click here to log in'} <Icon name=\"power\" />\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  renderAuth = type => {\n    let component = null;\n\n    switch (type) {\n      case 'basic':\n        component = this.renderBasic();\n        break;\n\n      case 'auth0':\n        component = this.renderAuth0();\n        break;\n\n      case 'saml':\n        component = this.renderSaml();\n        break;\n\n      default:\n        break;\n    }\n\n    return component;\n  };\n\n  render() {\n    const { ui, auth = {}, routerStore, whitelabel, namespace } = this.props;\n    const error = ui.error || _.get(routerStore, 'location.query.error');\n\n    const components = [];\n\n    let defaultProvider;\n    if (auth.default && auth[auth.default]) {\n      defaultProvider = auth.default;\n\n      components.push(this.renderAuth(defaultProvider));\n    }\n\n    _.forEach(auth, (data, provider) => {\n      if (provider === 'default' || provider === defaultProvider) return;\n\n      const authComponent = this.renderAuth(provider);\n      if (!authComponent) return;\n\n      if (components.length) {\n        components.push(\n          <Divider key={`divider-${provider}`} className=\"AccountForm-divider\" horizontal>\n            OR\n          </Divider>\n        );\n      }\n\n      components.push(authComponent);\n    });\n\n    return (\n      <React.Fragment>\n        <div className=\"Login px-4 h-full flex flex-col items-center justify-center m-auto w-full bg-white\">\n          <div className=\"AccountForm\">\n            {auth.title && (\n              <div className=\"LoginHeader mb-16 border-b\">\n                <h1 className=\"LoginHeader-title\">{auth.title}</h1>\n                {auth.subtitle && <div className=\"LoginHeader-subtitle pb-4\">{auth.subtitle}</div>}\n              </div>\n            )}\n\n            <ErrorMessage className=\"mb-6\" error={error} />\n\n            {components}\n          </div>\n        </div>\n\n        <HubBranding whitelabel={whitelabel} namespace={namespace} centered />\n      </React.Fragment>\n    );\n  }\n}\n\nconst InjectedLogin = inject((stores, props) => {\n  const { appStore, routerStore } = stores;\n\n  return {\n    routerStore,\n    ...appStore.injectUi('BasicAuth-Login'),\n  };\n})(observer(Login));\n\nexport default withRouteData(routeData => {\n  return <SiteData {...routeData} component={InjectedLogin} />;\n});\n"],"sourceRoot":""}