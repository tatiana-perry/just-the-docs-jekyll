{"version":3,"sources":["webpack:////home/circleci/project/node_modules/@fortawesome/pro-solid-svg-icons/faBolt.js","webpack:////home/circleci/project/node_modules/semantic-ui-react/dist/es/collections/Message/MessageContent.js","webpack:////home/circleci/project/node_modules/semantic-ui-react/dist/es/collections/Message/MessageHeader.js","webpack:////home/circleci/project/node_modules/semantic-ui-react/dist/es/collections/Message/MessageItem.js","webpack:////home/circleci/project/node_modules/semantic-ui-react/dist/es/collections/Message/MessageList.js","webpack:////home/circleci/project/node_modules/semantic-ui-react/dist/es/collections/Message/Message.js"],"names":["Object","defineProperty","exports","value","ligatures","svgPathData","definition","prefix","iconName","icon","faBolt","width","height","unicode","MessageContent","props","children","className","content","classes","classnames_default","rest","getUnhandledProps","ElementType","getElementType","react_default","a","createElement","extends_default","lib","isNil","handledProps","propTypes","Message_MessageContent","MessageHeader","create","factories","val","Message_MessageHeader","MessageItem","defaultProps","as","Message_MessageItem","MessageList","items","map_default","Message_MessageList","__webpack_require__","d","__webpack_exports__","Message_Message","_Component","Message","_getPrototypeOf2","_this","classCallCheck_default","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","call","apply","concat","defineProperty_default","assertThisInitialized_default","e","onDismiss","inherits_default","createClass_default","key","_this$props","attached","color","compact","error","floating","header","hidden","info","list","negative","positive","size","success","visible","warning","classNameBuilders","dismissIcon","Icon","name","onClick","handleDismiss","autoGenerateKey","isNil_default","react"],"mappings":"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","file":"templates/vendors~client-containers-Login~client-containers-Page.ae35e1bf.js","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar prefix = 'fas';\nvar iconName = 'bolt';\nvar width = 320;\nvar height = 512;\nvar ligatures = [];\nvar unicode = 'f0e7';\nvar svgPathData = 'M295.973 160H180.572L215.19 30.184C219.25 14.956 207.756 0 192 0H56C43.971 0 33.8 8.905 32.211 20.828l-31.996 240C-1.704 275.217 9.504 288 24.004 288h118.701L96.646 482.466C93.05 497.649 104.659 512 119.992 512c8.35 0 16.376-4.374 20.778-11.978l175.973-303.997c9.244-15.967-2.288-36.025-20.77-36.025z';\n\nexports.definition = {\n  prefix: prefix,\n  iconName: iconName,\n  icon: [\n    width,\n    height,\n    ligatures,\n    unicode,\n    svgPathData\n  ]};\n\nexports.faBolt = exports.definition;\nexports.prefix = prefix;\nexports.iconName = iconName;\nexports.width = width;\nexports.height = height;\nexports.ligatures = ligatures;\nexports.unicode = unicode;\nexports.svgPathData = svgPathData;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a content.\n */\n\nfunction MessageContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageContent, props);\n  var ElementType = getElementType(MessageContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default MessageContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a header.\n */\n\nfunction MessageHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('header', className);\n  var rest = getUnhandledProps(MessageHeader, props);\n  var ElementType = getElementType(MessageHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageHeader.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageHeader.create = createShorthandFactory(MessageHeader, function (val) {\n  return {\n    content: val\n  };\n});\nexport default MessageHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message list can contain an item.\n */\n\nfunction MessageItem(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageItem, props);\n  var ElementType = getElementType(MessageItem, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageItem.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageItem.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageItem.defaultProps = {\n  as: 'li'\n};\nMessageItem.create = createShorthandFactory(MessageItem, function (content) {\n  return {\n    content: content\n  };\n});\nexport default MessageItem;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport MessageItem from './MessageItem';\n/**\n * A message can contain a list of items.\n */\n\nfunction MessageList(props) {\n  var children = props.children,\n      className = props.className,\n      items = props.items;\n  var classes = cx('list', className);\n  var rest = getUnhandledProps(MessageList, props);\n  var ElementType = getElementType(MessageList, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? _map(items, MessageItem.create) : children);\n}\n\nMessageList.handledProps = [\"as\", \"children\", \"className\", \"items\"];\nMessageList.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand Message.Items. */\n  items: customPropTypes.collectionShorthand\n} : {};\nMessageList.defaultProps = {\n  as: 'ul'\n};\nMessageList.create = createShorthandFactory(MessageList, function (val) {\n  return {\n    items: val\n  };\n});\nexport default MessageList;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNil from \"lodash/isNil\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createHTMLParagraph, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\nimport Icon from '../../elements/Icon';\nimport MessageContent from './MessageContent';\nimport MessageHeader from './MessageHeader';\nimport MessageList from './MessageList';\nimport MessageItem from './MessageItem';\n/**\n * A message displays information that explains nearby content.\n * @see Form\n */\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Message, _Component);\n\n  function Message() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Message);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Message)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleDismiss\", function (e) {\n      var onDismiss = _this.props.onDismiss;\n      if (onDismiss) onDismiss(e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(Message, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          attached = _this$props.attached,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          compact = _this$props.compact,\n          content = _this$props.content,\n          error = _this$props.error,\n          floating = _this$props.floating,\n          header = _this$props.header,\n          hidden = _this$props.hidden,\n          icon = _this$props.icon,\n          info = _this$props.info,\n          list = _this$props.list,\n          negative = _this$props.negative,\n          onDismiss = _this$props.onDismiss,\n          positive = _this$props.positive,\n          size = _this$props.size,\n          success = _this$props.success,\n          visible = _this$props.visible,\n          warning = _this$props.warning;\n      var classes = cx('ui', color, size, useKeyOnly(compact, 'compact'), useKeyOnly(error, 'error'), useKeyOnly(floating, 'floating'), useKeyOnly(hidden, 'hidden'), useKeyOnly(icon, 'icon'), useKeyOnly(info, 'info'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(success, 'success'), useKeyOnly(visible, 'visible'), useKeyOnly(warning, 'warning'), useKeyOrValueAndKey(attached, 'attached'), 'message', className);\n      var dismissIcon = onDismiss && React.createElement(Icon, {\n        name: \"close\",\n        onClick: this.handleDismiss\n      });\n      var rest = getUnhandledProps(Message, this.props);\n      var ElementType = getElementType(Message, this.props);\n\n      if (!childrenUtils.isNil(children)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes\n        }), dismissIcon, children);\n      }\n\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), dismissIcon, Icon.create(icon, {\n        autoGenerateKey: false\n      }), (!_isNil(header) || !_isNil(content) || !_isNil(list)) && React.createElement(MessageContent, null, MessageHeader.create(header, {\n        autoGenerateKey: false\n      }), MessageList.create(list, {\n        autoGenerateKey: false\n      }), createHTMLParagraph(content, {\n        autoGenerateKey: false\n      })));\n    }\n  }]);\n\n  return Message;\n}(Component);\n\n_defineProperty(Message, \"Content\", MessageContent);\n\n_defineProperty(Message, \"Header\", MessageHeader);\n\n_defineProperty(Message, \"List\", MessageList);\n\n_defineProperty(Message, \"Item\", MessageItem);\n\n_defineProperty(Message, \"handledProps\", [\"as\", \"attached\", \"children\", \"className\", \"color\", \"compact\", \"content\", \"error\", \"floating\", \"header\", \"hidden\", \"icon\", \"info\", \"list\", \"negative\", \"onDismiss\", \"positive\", \"size\", \"success\", \"visible\", \"warning\"]);\n\nexport { Message as default };\nMessage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A message can be formatted to attach itself to other content. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['bottom', 'top'])]),\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A message can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A message can only take up the width of its content. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `negative`. */\n  error: PropTypes.bool,\n\n  /** A message can float above content that it is related to. */\n  floating: PropTypes.bool,\n\n  /** Shorthand for MessageHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** A message can be hidden. */\n  hidden: PropTypes.bool,\n\n  /** A message can contain an icon. */\n  icon: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.bool]),\n\n  /** A message may be formatted to display information. */\n  info: PropTypes.bool,\n\n  /** Array shorthand items for the MessageList. Mutually exclusive with children. */\n  list: customPropTypes.collectionShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `error`. */\n  negative: PropTypes.bool,\n\n  /**\n   * A message that the user can choose to hide.\n   * Called when the user clicks the \"x\" icon. This also adds the \"x\" icon.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onDismiss: PropTypes.func,\n\n  /** A message may be formatted to display a positive message.  Same as `success`. */\n  positive: PropTypes.bool,\n\n  /** A message can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A message may be formatted to display a positive message.  Same as `positive`. */\n  success: PropTypes.bool,\n\n  /** A message can be set to visible to force itself to be shown. */\n  visible: PropTypes.bool,\n\n  /** A message may be formatted to display warning messages. */\n  warning: PropTypes.bool\n} : {};"],"sourceRoot":""}